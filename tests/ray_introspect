#!/usr/bin/env python3

import time

import atexit
print(f'atexit ncallbacks pre-ray {atexit._ncallbacks()}')

from multiprocessing import Process

import ray
print(f'atexit ncallbacks post-ray {atexit._ncallbacks()}')

def atexit_handler():
    print('cade_atexit_handler')

@ray.remote
class MyActor:

    def __init__(self):
        print(f'atexit ncallbacks init {atexit._ncallbacks()}')
        self.p = None
        atexit.register(atexit_handler)


    def run(self):
        print(f'atexit ncallbacks run {atexit._ncallbacks()}')
        p = Process(target=time.sleep, args=(1000,), daemon=True)
        print(f'atexit ncallbacks pre-start {atexit._ncallbacks()}')
        p.start()
        print(f'atexit ncallbacks post-start {atexit._ncallbacks()}')
        self.p = p



    def __del__(self):
        print('destructor')

a = MyActor.remote()
ray.get(a.run.remote())
input('wait')

#a = MyActor()
#a.run()
#input('wait')
#del a
#input('wait2')
