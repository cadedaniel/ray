#!/usr/bin/env python3

import threading
import asyncio
import time

#asyncio.run_coroutine_threadsafe
class CopyManager:
    def __init__(self):
        self.self_lock = threading.Lock()
        self.loop = None
        self.thread = threading.Thread(target=lambda: asyncio.run(self.copy_manager_loop()))
        self.thread.start()

    async def copy_manager_loop(self):
        loop = asyncio.get_running_loop()
        with self.self_lock:
            self.loop = loop

        while True:
            print('Hello, world!')
            await asyncio.sleep(1)

    def enqueue(self, tensors, callback):
        asyncio.run_coroutine_threadsafe(coro_func(), self.loop)
        #asyncio.run_coroutine_threadsafe(all_reduce_tensors_async_helper(tensors, callback))
        #asyncio.run(all_reduce_tensors_async_helper(tensors, callback))

copy_manager = CopyManager()

time.sleep(1)
print('enqueueing coroutine from main thread', threading.get_native_id())

async def coro_func():
    print('coro func start', threading.get_native_id())
    await asyncio.sleep(1)
    print('coro func done')

#asyncio.run_coroutine_threadsafe(coro_func(), loop=copy_manager.loop)
copy_manager.enqueue(None, None)

copy_manager.thread.join()
